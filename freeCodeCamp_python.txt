Learn Python - Full Course for Beginners [Tutorial]
https://www.youtube.com/watch?v=rfscVS0vtbw
~ 4.5 hours


00:00:00 Introduction
00:01:45 Installing python and pycharm
00:06:40 Setup and hello world
00:10:23 Drawing a shape
00:15:06 Variables and Data types
00:27:03 Working with strings
00:38:18 Working with numbers
00:48:26 Getting input from users
00:52:37 Building a basic calculator
00:58:27 Mad libs Game 

01:03:10 Lists 
01:10:44 List Functions 
01:18:57 Tuples 
01:24:15 Functions 
01:34:11 Return statement 
01:40:06 If statement 
01:54:07 If statements and comparisons 

02:00:37 Building a better calculator 
02:07:17 Dictionaries
02:14:13 While loop
02:20:21 Building a Guessing game
02:32:44 For loop
02:41:20 Exponent Function 
02:47:13 2D lists and nested loop
02:52:41 Building a Translator 

03:00:18 Comments 
03:04:17 Try/Except 
03:12:41 Reading Files 
03:21:26 Writing a file
03:28:13 Modules and pip 
03:43:56 Classes and Objects 
03:57:37 Building a Multiple choice quiz

04:08:28 Object Function 
04:12:37 Inheritance 
04:20:43 Python interpreter


// Installing Python
        downlaod from the website
        python2 - legacy version 
        python3 - newest version, actively maintained
        Run the installer


// Choosing a text-editor
        Some IDEs are specifically for Python
        PyCharm is one of the most popular ones
        jetbrains.com/pycharm
                the community version is free and open source


// First program - "Hello World"
        Configure > Preferences > Theme
        Create new project
                select the python version 3 as your interpreter

        print("Hello World") - anything in here is printed to the console


// Drawing a shape!

print("   /|")  prints each line one at a time
print("  / |")  will print IN ORDER
print(" /  |")
print("/___|")


// Variables and Data Types

variable = a container to hold some data

separate words in a variable with an underscore
        e.g. character_name = "John"
             print("There once was a man named " + character_name + ", ")
                                add pluses in line to continue the string

"Strings" = plain text
Numbers = numbers (integers and float)
Boolean = TRUE / FALSE


// Working with Strings
        need "" around your strings
        \n - will insert a new line in the string (inside the ""!)
        \" - will "escape" the ". 'I literally want to print a "'
        concatenation - adding one string to another, like in the character_name example

        phrase = "Giraffe Academy"
        print(phrase.lower())       # lower() makes it all lower case
        print(phrase.upper())       # upper() makes it all upper case

        print(phrase.isupper())     # returns boolean value, checking if it's all in upper case
        print(phrase.upper().isupper())     # set all upper, checks if it's all upper, returns boolean

        print(len(phrase))          # get the length of the string

        print(phrase[0])            # get the first character of the string
                                    # PYTHON IS A ZERO INDEX LANGUAGE, i.e. the first value is 0, not 1

        print(phrase.index("a"))    # returns 3 because that's where that letter appears first in the string
        print(phrase.index("Acad")) # returns 8 because that's where the chunk appears in the string
        
        print(phrase.replace("Giraffe", "Elephant")     # replaces the whole word Giraffe with the whole world Elephant


// Working with Numbers

        You can do all the normal mathematical operations
        % - "mod" - give JUST the remainder in a division operation
        str(number) - converts the number to a string

        abs(number) - returns the absolute value
        pow(number, exponent) - returns the exponential result
        max(list, of, numbers) - returns the highest value
        min()
        round()

importing outside code into your program 

from MODULE import y
e.g. from math import *
        
        floor() - rounds down to the nearest whole
        ceil() - rounds up to th nearest whole
        sqrt() - the square root of the 


// Get user input

name = input("Prompt: ")  # taking the user input and assigning it to the variable "name"
print("Hello " + name + "!")  # prints the name in a string!


// Buildling a calculator

num1 = input("Enter a number: ")
num2 = input("Enter a number: ")
results = num1 + num2

print(result)  # but wait, they're strings right now! 


num1 = input("Enter a number: ")
num2 = input("Enter a number: ")
results = float(num1) + float(num2)

print(result)  # but wait, they're strings right now! 


// Madlibs Game

color = input("Enter a color: ")
plural_noun = input("Enter a Plural Noun: ")
celebrity = input("Enter a celebrity: ")

print("Roses are " + color)
print(plural_noun + "are blue")
print("I love " + celebrity)


// Lists

storing a lot of information in one space

list_name = ["first", "second", "third"]
        you can store multiple data types in one string

print(list_name[2])  # prints the third element on the list
print(list_name[-1])  # access the list from the end with negative numbers, starting with the last value being -1
print(list_name[1:])  # every item from position 1 to the end
print(list_name[1:3])  # every item from position 1 through position 3

You can reassign values...
list_name[1] = "new item"


// List Functions

extend()  # adds one list to the end of another lsit
    x.extend(y)

append()  # adds a value to the end of the list

insert(index_position, element_to_insert)

remove(element_to_remove)

clear() # no arguments

pop() # takes off the last element from the list

index(item_I_want_to_check_the_existence_of)  # returns the index of the item, if it's there

count(item_I_want_to_check_the_existence_of)  # returns how many times that value occurs in the list

sort()  # sorts the list

reverse()  # reverses the order of the list

copy()  # copies the list


// Tuples

tuples: like lists, but with important differences
        tuples are IMMUTABLE, they cannot be changed once they're set
        often used when you want to store values that will not change

using parentheses () for a tuple
using square brackets [] for a list



pick up again at 01:24:24












