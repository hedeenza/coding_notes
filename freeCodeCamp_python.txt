Learn Python - Full Course for Beginners [Tutorial]
https://www.youtube.com/watch?v=rfscVS0vtbw
~ 4.5 hours


00:00:00 Introduction
00:01:45 Installing python and pycharm
00:06:40 Setup and hello world
00:10:23 Drawing a shape
00:15:06 Variables and Data types
00:27:03 Working with strings
00:38:18 Working with numbers
00:48:26 Getting input from users
00:52:37 Building a basic calculator
00:58:27 Mad libs Game 

01:03:10 Lists 
01:10:44 List Functions 
01:18:57 Tuples 
01:24:15 Functions 
01:34:11 Return statement 
01:40:06 If statement 
01:54:07 If statements and comparisons 

02:00:37 Building a better calculator 
02:07:17 Dictionaries
02:14:13 While loop
02:20:21 Building a Guessing game
02:32:44 For loop
02:41:20 Exponent Function 
02:47:13 2D lists and nested loop
02:52:41 Building a Translator 

03:00:18 Comments 
03:04:17 Try/Except 
03:12:41 Reading Files 
03:21:26 Writing a file
03:28:13 Modules and pip 
03:43:56 Classes and Objects 
03:57:37 Building a Multiple choice quiz

04:08:28 Object Function 
04:12:37 Inheritance 
04:20:43 Python interpreter


// Installing Python
        downlaod from the website
        python2 - legacy version 
        python3 - newest version, actively maintained
        Run the installer


// Choosing a text-editor
        Some IDEs are specifically for Python
        PyCharm is one of the most popular ones
        jetbrains.com/pycharm
                the community version is free and open source


// First program - "Hello World"
        Configure > Preferences > Theme
        Create new project
                select the python version 3 as your interpreter

        print("Hello World") - anything in here is printed to the console


// Drawing a shape!

print("   /|")  prints each line one at a time
print("  / |")  will print IN ORDER
print(" /  |")
print("/___|")


// Variables and Data Types

variable = a container to hold some data

separate words in a variable with an underscore
        e.g. character_name = "John"
             print("There once was a man named " + character_name + ", ")
                                add pluses in line to continue the string

"Strings" = plain text
Numbers = numbers (integers and float)
Boolean = TRUE / FALSE


// Working with Strings
        need "" around your strings
        \n - will insert a new line in the string (inside the ""!)
        \" - will "escape" the ". 'I literally want to print a "'
        concatenation - adding one string to another, like in the character_name example

        phrase = "Giraffe Academy"
        print(phrase.lower())       # lower() makes it all lower case
        print(phrase.upper())       # upper() makes it all upper case

        print(phrase.isupper())     # returns boolean value, checking if it's all in upper case
        print(phrase.upper().isupper())     # set all upper, checks if it's all upper, returns boolean

        print(len(phrase))          # get the length of the string

        print(phrase[0])            # get the first character of the string
                                    # PYTHON IS A ZERO INDEX LANGUAGE, i.e. the first value is 0, not 1

        print(phrase.index("a"))    # returns 3 because that's where that letter appears first in the string
        print(phrase.index("Acad")) # returns 8 because that's where the chunk appears in the string
        
        print(phrase.replace("Giraffe", "Elephant")     # replaces the whole word Giraffe with the whole world Elephant


// Working with Numbers

        You can do all the normal mathematical operations
        % - "mod" - give JUST the remainder in a division operation
        str(number) - converts the number to a string

        abs(number) - returns the absolute value
        pow(number, exponent) - returns the exponential result
        max(list, of, numbers) - returns the highest value
        min()
        round()

importing outside code into your program 

from MODULE import y
e.g. from math import *
        
        floor() - rounds down to the nearest whole
        ceil() - rounds up to th nearest whole
        sqrt() - the square root of the 


// Get user input

name = input("Prompt: ")  # taking the user input and assigning it to the variable "name"
print("Hello " + name + "!")  # prints the name in a string!


// Buildling a calculator

num1 = input("Enter a number: ")
num2 = input("Enter a number: ")
results = num1 + num2

print(result)  # but wait, they're strings right now! 


num1 = input("Enter a number: ")
num2 = input("Enter a number: ")
results = float(num1) + float(num2)

print(result)  # but wait, they're strings right now! 


// Madlibs Game

color = input("Enter a color: ")
plural_noun = input("Enter a Plural Noun: ")
celebrity = input("Enter a celebrity: ")

print("Roses are " + color)
print(plural_noun + "are blue")
print("I love " + celebrity)


// Lists

storing a lot of information in one space

list_name = ["first", "second", "third"]
        you can store multiple data types in one string

print(list_name[2])  # prints the third element on the list
print(list_name[-1])  # access the list from the end with negative numbers, starting with the last value being -1
print(list_name[1:])  # every item from position 1 to the end
print(list_name[1:3])  # every item from position 1 through position 3

You can reassign values...
list_name[1] = "new item"


// List Functions

extend()  # adds one list to the end of another lsit
    x.extend(y)

append()  # adds a value to the end of the list

insert(index_position, element_to_insert)

remove(element_to_remove)

clear() # no arguments

pop() # takes off the last element from the list

index(item_I_want_to_check_the_existence_of)  # returns the index of the item, if it's there

count(item_I_want_to_check_the_existence_of)  # returns how many times that value occurs in the list

sort()  # sorts the list

reverse()  # reverses the order of the list

copy()  # copies the list


// Tuples

tuples: like lists, but with important differences
        tuples are IMMUTABLE, they cannot be changed once they're set
        often used when you want to store values that will not change

using parentheses () for a tuple
using square brackets [] for a list


// Functions

collection of code that performs a specific task 

def  # the keyword that will create a function

def say_hi():  # "all the code that comes after this line will be in the function
    print("Hello user")  # you need to indent for it to be in the function!

nothing will happen until you call your function 

say_hi()  # this will call the funciton 
          # python will execute code in top down order that it is asked to 

parameter = a piece of information we give to the function 


def say_hi(name, age):  # we have to give it a name for it to run
    print("Hello " + name + ", you are" + age)

say_hi("Mike", "35")

>>> Hello Mike, you are 35


// Return functions

sometimes when we run a program, we want to get some info back from the function
return allows us to get that information 

def cube(num):
    return num * num * num  # returns the result of this operation
                            # return breaks you out of the function / nothing written in the function after the return line will get performed

print(cube(3))


// if statements - making decisions

is_male = FALSE
is_tall = TRUE

if is_male or is_tall:
    print("You are male, or tall, or both")
elif is_male and not(is_tall):  # not() negates what's inside it
    print("You are a short male")
elif not(is_male) and is_tall:
    print("You are not a male but are tall")
else:
    print("You are neither male nor tall")

operators: or, and 


// If statements and comparisons

def max_num(num1, num2, num3):
    if num1 >= num2 and num1 >= num3:
        return num1
    elif num2 >= num1 and num2 >= num3:
        return num2
    else:
        return num3

print(max_num(300, 40, 5))

comparison operators: ==, '!=", <=, >, etc. 


// Building a better calculator


num1 = float(input("Enter first number: "))
op = input("Enter operator: ")
num2 = float(input("Enter second number: "))

if op == "+":
    print(num1 + num2)
elif op == "-":
    print(num1 - num2)
elif op == "/":
    print(num1 / num2)
elif op == "*":
    print(num1 * num2)
else:
    print("Invalid operator


// Dictionaries

word = key
definition = value

monthConversions = {}  # dictionaries are inside the curly brackets

then define the key/value pairs 
!!! There cannot be duplicate entries !!!

monthConversions = {
    "Jan": "January",
    "Feb": "February",
    "Mar": "March",
    "Apr": "April",
    "May": "May",
    "Jun": "June",
    "Jul": "July",
    "Aug": "August",
    "Sep": "September",
    "Oct": "October",
    "Nov": "November",
    "Dec": "December"
}

# refer to the dictionary by name, and use the indexes

dictionary["key"]  # will get you the value associated with that key
print(monthConversions["Jan"])  # will return "January"
print(monthConversions.get("Dec"))  # will return "December"

using get(), you can define a default value

print(monthConversions.get("Truck", "Not a valid Key"))

the keys and values can be of any data type


// While loop 

for executing a lot of code over and over until a condition is met

i = 1
while i <= 10:
    print(i)
    i = i + 1  # or i += 1 to add one to i each time, shorthand version

print("Done with loop")


// Building a guessing game

secret_word = "giraffe"
guess = ""
guess_count = 0
guess_limit = 3
out_of_guesses = FALSE

while guess != secret_word and not(out_of_guesses):
    if guess_count < guess_limit:
        guess = input("Enter guess: ")
        guess_count += 1
    else:
        out_of_guesses = TRUE

if out_of_guesses:
    print("You lose the game")
else: 
    print("You win!")


// for loops

special loop that loops over collections of items
a different value each iteration


for letter in "Giraffe Academy":
    print(letter)  # prints everything out, one letter at a time

friends = ["Jim", "Karen", "Kevin"]
for friend in friends:
    print(friend)


for index in range(3, 10):
    print(index)  # print everything including 3, not including 10

for index in range(len(friends)):
    print(friends[index])    # prints the index values for each in the array

for index in range(5):
    if index == 0:
        print("First Iteration:)
    else:
        print("Not First")


// Exponential Functions

** for the exponent

def raise_to_power(base_num, pow_num):
    result = 1
    for index in range(pow_num):
        result = result * base_num
    return result

print(raise_to_power(3, 2))


// 2D Lists and Nested Loops

lists within lists

number_grid = [  # this is a grid of 4 rows, 3 columns
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9],
    [0]
]

to access the index positions of each element
    [row index, column index]

print(number_grid[2][1])  # one square bracket next to the other

for row in number_grid:
    print(row)  # will print each row


for row in number_grid:
    for col in row:
        print(col)  # will print each element indicidually, in order


// Building a Translator

def translate(phrase):
    translation = ""  # empty string to start
    for letter in phrase:  # access each letter in the phrase
        if letter in "AEIOUaeiou":  # check if it's within this range
            translation = translation + "g"
        else:
            translation = translation + letter
    return translation 

print(translate(input("Enter a phrase"))


# You can refine the checking whether it's a vowel by changing it to 
if letter.lower() in "aeiou":  

# Incorporating a capital G as first letter

if letter.lower() in "aeiou":
    if letter.isupper():
        translation = translation + "G"
    else: 
        translation = translation + "g"


// Comments in Python

comments don't get executed
used for humans to explain what's happening in the code
# use the hashtag symbol 

'''
you can also 
comment multiple lines
with the triple apostrophe
'''

You can 'comment out' a line of code if it's causing issues
        help in the debuging process


// Try Except 

handling errors when they occur instead of just stopping the program

number = int(input("Enter a number"))
print(number)  # will throw an error if you don't input an integer

try:
    number = int(input("Enter a number: "))
    print(number
except: 
    print("Invalid Input")  # now it won't break, but it will print what we tell it to if there's an issue


you can have your code handle different types of errors differently

except ZeroDivisionError:
    print("Divided by zero")
except ValueError:
    print("Invalid Input")

you can store the error as a variable

except ZeroDivisionError as err:
    print(err)

best practice in python is to write except scenarios for each specific error rather than 
        a general "except".


// Reading files in Python

reading in information from external files

open(file_name OR file_path, mode_to_open_the_file)
        # "r" - read = "just want to see what's in it"
        # "w" - write = "i can change the file"
        # "a" - "append = "add stuff to the end"
        # "r+" = "read and write"

good practice to close the file at some point as well

employee_file = open("employees.txt", "r")

employee_file.close()


good to check whether the file is actually readable before you try to do anything with it!

print(employee_file.readable())  # returns a boolean T/F


you can read everyting in the file...

.read()

or line by line 

.readline()  # you can stack these in a few lines to have it read multiple lines in a row

but you can reference the index of a specific line with 

.readlines()[1]  # reads the line at index position 1

# reading with a for loop
for employee in employee_file.readlines():
    print(employee)


// Writing and appending to files

employee_file = open("employees.txt", "a")  # makes sure we're in append mode
employee_file.write("Toby - Human Resources")  # adds this line to the list
employee_file.close()

be careful when appending - you can easily mess up the source file

you need a new line character to add an entry to a new line "\n"

!!! Careful, "w" will completely overwrite the original file !!!


// Modules and Pip

module = a python file we can import into our projects

import useful_tools  # now you can use all of the attributes from the other file

there are indexes of modules online that we can access!
        check the python.org main site

built-in modules = are always available, as soon as you install python
external modules = External libraries > Lib > the external modules we downloaded!

third-party module installation:

In the command line...
pip --version # Check that pip is installed
pip install external_module_name  # installs the specified module
pip uninstall external_module_name  # uninstall the specified module

In your project
import external_module_name #  sometimes the import name is not exactly the same as the package name


// Classes and Objects

help make your programs more organized and more powerful

classes ~ creating your own data types

class name_of_new_class

class Student:
    
    def __init__(self, name, major, gpa, is_on_probation):  # an initialize function, mapping what attributes a Student should have
        self.name = name  # the 'self' part means the object name will be the 
        self.major = major  # name that the writer passes in when this class 
        self.gpa = gpa  # gets used later, i.e. student1, student2
        self.is_on_probation = is_on_probation  # "the probation status of the object = the value we passed in up top"

# now in a different file, we can creat a student!
        # an Object is an actual Student, not just what it should be

from Student import Student  # from the Student file, import the Student class we just created

student1 = Student("Jim", "Business", 3.1, False)  # created a student object

print(student1)  # we can access the individual aspects from this student
print(student1.name)  # prints the name

student2 = Student("Pam", "Art", 2.5, True)
print(student2.gpa)

you can do this with ANYTHING


// Building a multiple-choice quiz

question_prompts = [
    "What color are apples?\n(a) Red/Green\n(b) Purple\n(c) Orange\n\n",
    "What color are bananas?\n(a) Teal\n(b) Magenta\n(c) Yellow\n\n",
    "What color are strawberries?\n(a) Yellow\n(b) Red\n(c) Blue\n\n",
]

# we need to keep track of the prompts and their answers

question.py

class Question:
    def __init__(self, prompt, answer):  # everything will have a question and an answer
        self.prompt = prompt
        self.answer = answer

back in app.py

from Question import Question

questions = [
    Question(question_prompts[0], "a"),  # tracking the prompt and the answer to that prompt
    Question(question_prompts[1], "c"),
    Question(question_prompts[2], "b"),
]

def run_test(questions):  # loop through all the questions, get the user's answer, check answer against key
    score = 0  # we'll add to the score as the test goes
    for question in questions:  # for each question in the questions array we made
        answer = input(question.prompt)  # sets the answer to be equal to the answer assigned to that prompt
        if answer == question.answer:  # if the answer the user provides is equal to the key
            socre += 1  # add one to the score
    print("You got " + str(score)= "/" + str(len(questions)) + " correct")  # Track score, converting the number values to strings so they can be displayed in the string, calculating the number of questions wtih the len(questions)

run_test(questions)


// Class and Object Functions

a function we can use inside of a class to...
        modify the objects of that class
        get specific information about those objects

defining a function within a class so that all of the objects 
        of that class have access to that function

class Student:
    def __init__(self, name, major, gpa):
        self.name = name
        self.major = major
        self.gpa = gpa

    def on_honor_roll(self):
        if self.gpa >= 3.5:
            return True
        else:
            return False

print(student1.on_honor_roll())  # will return true if the gpa meets the requirement, false if not


// Inheritence

defining attributes and functions inside of a class...
        then creating another class that can INHERIT all of those attributes

# an example with an arbitrary class

class Chef:
    def make_chicken(self):
        print("The chef makes chicken")

    def make_salad(self):
        print("The chef makes salad")

    def make_special_dish(self):
        print("The chef makes a special dish")

# in another file...

from Chef import Chef

myChef() = Chef()  # the new chef I'm creating is of the Chef class we set up in the other file

myChef.make_chicken()  # calls the make_chicken() function we created in the chef class earlier


# Creating a Chinese Chef class

from Chef import Chef

class chinese_chef(Chef):  # "I want the Chinese chef to be able to use all of the functions we already set up in the chef class"
    def make_fried_rice(self):
        print("The chef makes fried rice")
    def make_special_dish(self):
        print("The chef makes orange chicken")  # this will override the special dish function we inherited from the Chef class

from chinese_chef import chinese_chef


// Python Interpreter

trying out python commands in a safe and neutral environment

in you command prompt or CLI of choice...

start in python mode by typing python or python3 depending on what your system is set up to handle














